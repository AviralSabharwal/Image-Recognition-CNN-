# Image-Recognition-CNN (Backend)

# Importing the libraries.
import keras
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.datasets import cifar10

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

data_augmentation = True
batch_size=32
epochs=5

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convulation
classifier.add(Conv2D(32, (3, 3), input_shape = (32, 32, 3), activation = 'relu'))

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Adding a second convolutional layer
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full Connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 10, activation = 'softmax'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

# Part 2 - Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator

if not data_augmentation:
    print('Not using data augmentation.')
    classifier.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        rescale = 1./255,
        shear_range=0.2,  # set range for random shear
        zoom_range=0.2,  # set range for random zoom
        horizontal_flip=True)  # randomly flip images
datagen.fit(x_train)

# Saving and Loading the model.

from keras.models import load_model

# classifier.save('keras_cifar10_trained_model.h5') ## Saving the Model.
# del classifier ## Deletes the existing model.

classifier = load_model('keras_cifar10_trained_model.h5') ## Loading the saved model

# Making new predictions.

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('truck1.jpg', target_size = (32, 32))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
labels=['Airplane','Automobile','Bird','Cat','Deer','Dog','Frog','Horse','Ship','Truck','\0']
for i in range(0,10):
    if result[0][i]==1:
        prediction=labels[i]
        print(labels[i])
    elif result[0][i]<1 and result[0][i]>0:
        print(labels[i],":","%.2f"% (result[0][i]*100))
        
        
       
